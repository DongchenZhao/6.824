2A----------------------------------
- 心跳 0.15秒
- follower timeout 和 election timeout 0.5-0.8秒，随机

对于一个Raft server，并行体现在以下方面
- follower的心跳检测routine，拥有心跳超时逻辑
- follower并行处理RequestVote RPC
- candidate的选举超时routine
- candidate并行发送RequestVote RPC
- leader的心跳routine
- leader并行发送AppendEntries RPC
- 向客户端发送applyChs的routine(Cond)


  ... Passed --   8.1  7  474   89208    0
PASS


2B-----------------------------------
- leader state
    - nextIndex[]: for each server, index of the next log entry to send to that server (initialized to leader last log index + 1)
    - matchIndex[]: for each server, index of highest log entry known to be replicated on server (initialized to 0, increases monotonically)

- server state
    - lastApplied: index of highest log entry applied to state machine (initialized to 0, increases monotonically)
    - commitIndex: index of highest log entry known to be committed (initialized to 0, increases monotonically)

- requestVoteRPC
    - lastLogIndex: index of candidate’s last log entry
    - lastLogTerm: term of candidate’s last log entry

- appendEntriesRPC
    - prevLogIndex: index of log entry immediately preceding new ones
    - prevLogTerm: term of prevLogIndex entry
    - entries[]: log entries to store (empty for heartbeat; may send more than one for efficiency)
    - leaderCommit: leader’s commitIndex

- election restriction
    - 更改RequestVoteRPC
    - candidate has higher term in last log entry, or
    - candidate has same last term and same length or longer log

- leader只commit自己term的log entry(Figure 8)

- log 复制优化: requestVoteRPC返回内容增加以下字段
    - XTerm:  term in the conflicting entry (if any)
    - XIndex: index of first entry with that term (if any)
    - XLen:   log length

- lastApplied 和 commitIndex
    - 要么单开一个go routine来 apply log
    - 避免线程并发apply log

- 加速日志回溯优化
    - If a follower does not have prevLogIndex in its log, it should return with conflictIndex = len(log) and conflictTerm = None.
    - If a follower does have prevLogIndex in its log, but the term does not match, it should return conflictTerm = log[prevLogIndex].Term, and then search its log for the first index whose entry has term equal to conflictTerm.
    - Upon receiving a conflict response, the leader should first search its log for conflictTerm. If it finds an entry in its log with that term, it should set nextIndex to be the one beyond the index of the last entry in that term in its log.
    1 1 2 2 3 3 3 4 4 4 4
    1 1 2 2 3 3 3 3 3 3 3 3 3
    - If it does not find an entry with that term, it should set nextIndex = conflictIndex.

- TODO
    - XLen 规定不完善
    - leader定期检查日志匹配情况，有选择地发送AE RPC
    - leader收到log忘记更新自己的matchIndex了  done

    - 貌似leader更新完自己的日志后，发送到其他server，其他server没有响应

    You'll want to have a separate long-running goroutine that sends
    committed log entries in order on the applyCh. It must be separate,
    since sending on the applyCh can block; and it must be a single
    goroutine, since otherwise it may be hard to ensure that you send log
    entries in log order. The code that advances commitIndex will need to
    kick the apply goroutine; it's probably easiest to use a condition
    variable (Go's sync.Cond) for this.